---
##############################
########### Apt ##############
##############################
- name: Get Kernel Release
  shell: uname -r
  register: kernel_release

- name: Installing Dependencies with Apt
  become: yes
  apt:
    name:
      - apt-transport-https # gcp
      - autoconf # watchman
      - automake # watchman
      - bat # dev
      - bear
      - ca-certificates # docker gcp
      - clang
      - clangd
      - curl # docker
      - fd-find # dev
      - fonts-powerline # zsh theme
      - gnome-tweak-tool # dev
      - gnupg # docker gcp
      - jq # dev
      - leiningen # dev
      - libclang-dev
      - libsecret-1-0 # libsecret
      - libsecret-1-dev # libsecret
      - libssl-dev # watchman
      - libtool # watchman
      - linux-tools-{{ kernel_release.stdout }}
      - lsb-release # docker
      - openjdk-11-jdk # clojure
      - openjdk-8-jdk # clojure
      - powerline # zsh theme
      - python-setuptools # watchman
      - rlwrap # clojure
      - software-properties-common
      - tmux # dev
      - tree # dev
      - xclip # dev
    state: latest
    update_cache: yes

##############################
########### Brew #############
##############################

- name: Installing Dependencies with Brew
  command: brew update && brew install mkcert clojure ripgrep

##############################
########### Cargo ############
##############################

- name: Installing Dependencies with Cargo
  command: cargo install cargo-generate git-delta

##############################
############ Go ##############
##############################

- name: Install EFM LSP Server
  shell: go install github.com/mattn/efm-langserver@latest

##############################
########### Node #############
##############################

- name: Install Dependencies with Node
  shell: source {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm use default && npm install -g @babel/core @babel/preset-env @babel/cli @babel/node live-server eslint_d yarn neovim prettier serverless jest aws-cdk csvtojson
  args:
    executable: /bin/bash

##############################
########### Pip ##############
##############################

- name: Installing Dependencies with Pip
  pip:
    name:
      - pynvim==0.4.3
      - cfn-lint
      - awscli

##############################
########## Snaps #############
##############################

- name: Installing Bitwarden
  become: yes
  snap:
    name: bitwarden
    state: present

- name: Installing VSCode
  become: yes
  snap:
    name: code
    classic: yes
    state: present

- name: Installing CMake
  become: yes
  snap:
    name: cmake
    classic: yes
    state: present

##############################
########### Custom ###########
##############################

- import_tasks: "{{ role_path }}/packages/aws/main.yml"

- import_tasks: "{{ role_path }}/packages/chrome/main.yml"

- import_tasks: "{{ role_path }}/packages/clojure/main.yml"

- import_tasks: "{{ role_path }}/packages/docker/main.yml"

- import_tasks: "{{ role_path }}/packages/fonts/main.yml"

- import_tasks: "{{ role_path }}/packages/chrome/main.yml"

- import_tasks: "{{ role_path }}/packages/clojure/main.yml"

- import_tasks: "{{ role_path }}/packages/gcp/main.yml"

- import_tasks: "{{ role_path }}/packages/git/main.yml"

- import_tasks: "{{ role_path }}/packages/tmux/main.yml"

- import_tasks: "{{ role_path }}/packages/wasm_pack/main.yml"

- import_tasks: "{{ role_path }}/packages/vim/main.yml"

- name: Check watchman installation
  command: which watchman
  register: installed_watchman
  ignore_errors: true

- import_tasks: "{{ role_path }}/packages/watchman/main.yml"
  when: not installed_watchman
