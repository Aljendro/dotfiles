" Settings vimrc file.
"
" Maintainer: Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
"

"""""""""""""""""""" Plugins

call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pangloss/vim-javascript'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sirver/ultisnips'
Plug 'terryma/vim-multiple-cursors'
Plug 'tomasr/molokai'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'

call plug#end()

"""""""""""""""""""" Settings

let g:loaded_perl_provider   = 0
let g:loaded_python_provider = 0
let g:loaded_ruby_provider   = 0
let g:node_host_prog         = expand("~/.nvm/versions/node/v12.18.0/bin/neovim-node-host")
let g:python3_host_prog      = expand("/usr/bin/python3")

filetype plugin indent on
syntax enable

set autoindent                     " Copy indentation from current line when opening new line
set cmdheight=2                    " Give more space for displaying messages.
set display=truncate               " Show @@@ in the last line if it is truncated.
set expandtab                      " Default to spaces
set guifont=Ubuntu\ Mono\ Bold\ 14 " Set default font
set hidden                         " TextEdit might fail if hidden is not set
set incsearch                      " Do incremental searching when it's possible to timeout.
set nobackup                       " Some servers have issues with backup files (see #649 Coc.nvim)
set nolangremap
set nowritebackup
set nrformats-=octal               " Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
set number                         " Add line numbers
set relativenumber                 " Add line numbers relative to the current line
set ruler                          " show the cursor position all the time
set scrolloff=5                    " Show a few lines of context around the cursor.  Note that this makes the
set shiftwidth=2
set shortmess+=c                   " Don't pass messages to |ins-completion-menu|.
set showcmd                        " display incomplete commands
set signcolumn=yes                 " Always show the signcolumn, otherwise it would shift the text each time
set splitbelow                     " Open a window below the current window
set splitright                     " Open a window right of the current window
set tabstop=2                      " Number of spaces that a <Tab> counts for
set timeout                        " time out for mappings
set timeoutlen=1000
set ttimeout                       " time out for key codes
set ttimeoutlen=100
set updatetime=100                 " Set the amount of time vim waits to write to the swap file
set wildmenu                       " display completion matches in a status line

"""""""""""""""""""" Functions

function DeleteTrailingSpacesSilent()
  %s/\s\+$//e
  call histdel('search', -1)
endfunction

function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

"""""""""""""""""""" Autocommands

augroup vimStartup
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

  " Removing the o option removes adding a comment when open new line
  autocmd Filetype * set formatoptions-=o
augroup END

" Whenever Vim writes things to a buffer
augroup vimWrite
  autocmd!
  autocmd FileType c,cpp,java,javascript,vim,python,yaml,sh autocmd BufWritePre <buffer> :call DeleteTrailingSpacesSilent()
augroup END

" Toggle in insert mode
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

"""""""""""""""""""" Vim

nnoremap <space> <Nop>
let mapleader = " "

iabbrev @@ Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
iabbrev """ """"""""""""""""""""

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Quick edit vimrc (plus cursor disappearing workaround (!ls<cr><cr>))
nnoremap <leader>ev :vsplit $DOTFILES_DIR/ansible/roles/vim/files/vimrc<cr>:!ls<cr><cr>G
nnoremap <leader>sv :w<cr>:source ~/.vimrc<cr>
nnoremap <leader>sve :w<cr>:source ~/.vimrc<cr>:q<cr>:!ls<cr><cr>

" Create a new tab at the end
nnoremap <leader>tn :<C-U>tabnew<cr>:<C-U>tabmove<cr>
" Close the tab
nnoremap <leader>tc :<C-U>tabclose<cr>

" Move between windows easily
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Close highlighting
nnoremap <leader>h :noh<cr>

"""""""""""""""""""" Molokai Theme

colorscheme molokai

"""""""""""""""""""" Lightline

set laststatus=2

"""""""""""""""""""" NERDTree (File Tree Viewer Plugin)

nnoremap <leader>n :<C-U>NERDTreeFind<cr>

let NERDTreeShowLineNumbers = 1
let NERDTreeQuitOnOpen = 3

augroup customNERDTree
  autocmd!
  " Close NERDTree if its the last open window
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  autocmd FileType nerdtree nnoremap <buffer> <leader>n :<C-U>NERDTreeToggle<cr>
augroup END

"""""""""""""""""""" NERDCommenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 0

"""""""""""""""""""" Fugitive (Git Plugin)

" Open diffs of all the different changed files in tabs
nnoremap <leader>dt :<C-U>Git difftool -y<cr>
" Choose left buffer
nnoremap <leader>dl :<C-U>diffget //2<cr>
" Choose the right buffer
nnoremap <leader>dr :<C-U>diffget //3<cr>
" Refresh difftool
nnoremap <leader>du :<C-U>diffupdate
" Open merge conflicts in different tabs
nnoremap <leader>gmc :<C-U>Git mergetool<cr>
" Open git blame with commit and author
nmap <leader>gb :<C-U>Git blame<cr>A

cabbrev gcp Git push
cabbrev gco Git checkout
cabbrev gcb Git checkout -b
cabbrev gac Git commit -a -m
cabbrev gsta Git stash push -u
cabbrev gstd Git stash drop
cabbrev gstl Git stash list
cabbrev gstp Git stash pop

"""""""""""""""""""" Snippets

" Trigger configuration.
let g:UltiSnipsExpandTrigger="<C-g>"
let g:UltiSnipsListSnippets="<S-C-g>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsEditSplit="vertical"

" Directories to search for snippets
let g:snippetPath=$DOTFILES_DIR.'/ansible/roles/vim/files/snippets/'
let g:UltiSnipsSnippetDirectories=[snippetPath]

" Quick Edit the snippets
nnoremap <expr> <leader>es ':<C-U>tabedit ' . g:snippetPath

"""""""""""""""""""" FZF (Fuzzy Finder)

nnoremap <leader>fa :<C-U>Files<cr>
nnoremap <leader>ff :<C-U>GFiles<cr>
nnoremap <leader>fg :<C-U>Rg<cr>
nnoremap <leader>fh :<C-U>History:<cr>
nnoremap <leader>fl :<C-U>Lines<cr>
nnoremap <leader>fs :<C-U>History/<cr>

"""""""""""""""""""" Coc (LSP Client)

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" use <c-space>for trigger completion
inoremap <silent><expr> <c-space> coc#refresh()
" use the following to cycle and choose completion
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

augroup customLSP
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  " Close the pop up menu after completion
  autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END

" Use C to open coc config
call SetupCommandAbbrs('C', 'CocConfig')

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Navigate diagnostics
nmap ]g <Plug>(coc-diagnostic-prev)
nmap [g <Plug>(coc-diagnostic-next)

nmap <leader>ad <Plug>(coc-definition)
nmap <leader>at <Plug>(coc-type-definition)
nmap <leader>ai <Plug>(coc-implementation)
nmap <leader>ar <Plug>(coc-references)
nmap <leader>aR <Plug>(coc-rename)

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <leader><leader>d  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <leader><leader>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <leader><leader>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <leader><leader>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <leader><leader>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <leader><leader>j   :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <leader><leader>k   :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <leader><leader>r :<C-u>CocListResume<CR>

