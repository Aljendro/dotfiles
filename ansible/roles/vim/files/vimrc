" Settings vimrc file.
"
" Maintainer: Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
"

source $DOTFILES_DIR/ansible/roles/vim/files/helpers/functions.vim

call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
Plug 'benmills/vimux'
Plug 'craigemery/vim-autotag'
Plug 'daveyarwood/vim-alda'
Plug 'easymotion/vim-easymotion'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'godlygeek/tabular'
Plug 'guns/vim-sexp'
Plug 'itchyny/lightline.vim'
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'luochen1990/rainbow'
Plug 'mattn/emmet-vim'
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'olical/conjure'
Plug 'prettier/vim-prettier', { 'do': 'npm -s install' }
Plug 'raimondi/delimitmate'
Plug 'rstacruz/sparkup'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'sirver/ultisnips'
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

call plug#end()

"""""""""""""""""""" Settings

let g:gruvbox_contrast_dark    = 'medium'
let g:gruvbox_hls_cursor       = 'blue'
let g:gruvbox_invert_selection = 0
let g:rainbow_active           = 1

colorscheme gruvbox

filetype plugin indent on
syntax enable

let g:loaded_perl_provider   = 0
let g:loaded_python_provider = 0
let g:loaded_ruby_provider   = 0
let g:node_host_prog         = expand("~/.nvm/versions/node/v12.13.0/bin/neovim-node-host")
let g:python3_host_prog      = expand("/usr/bin/python3")

set autoindent                     " Copy indentation from current line when opening new line
set autowrite
set background=dark                " Indicated the type of background
set clipboard=unnamedplus          " Yank to the system clipboard
set cmdheight=2                    " Give more space for displaying messages.
set cursorline                     " Highlights the current line
set display=truncate               " Show @@@ in the last line if it is truncated.
set encoding=utf-8
set expandtab                      " Convert tab to spaces
set fileencoding=utf-8
set guifont=Ubuntu\ Mono\ Bold\ 14
set hidden                         " Buffer becomes hidden when it is abandoned
set hlsearch                       " Highlight searches
set ignorecase                     " Ignore case when searching
set incsearch                      " Do incremental searching when it's possible to timeout.
set laststatus=2                   " Always have a status line
set mouse=a                        " Allows mouse click on vim
set nobackup                       " Some servers have issues with backup files (see #649 Coc.nvim)
set nolangremap                    " Do not remap characters
set noshowmode                     " Don't show the -- Insert -- anymore
set nowrap                         " Do not wrap lines
set nowritebackup                  " Do not make backup when overwriting a file
set nrformats-=octal               " Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
set ruler                          " Show the cursor position all the time
set scrolloff=5                    " Keep context around cursor
set shiftwidth=2
set shortmess+=c                   " Don't pass messages to |ins-completion-menu|.
set showcmd                        " Display incomplete commands
set signcolumn=yes                 " Always show the signcolumn, otherwise it would shift the text each time
set smartcase                      " If search contains uppercase characters, disobey ignorecase
set smartindent                    " Indents when creating a newline
set smarttab                       " Discerns between 2 vs. 4 when tabbing
set splitbelow                     " Open a window below the current window
set splitright                     " Open a window right of the current window
set t_Co=256
set tabstop=2
set termguicolors
set timeout                        " Time out for mappings
set timeoutlen=1000
set ttimeout                       " Time out for key codes
set ttimeoutlen=100
set updatetime=100                 " Set the amount of time vim waits to write to the swap file
set wildmenu                       " Display completion matches in a status line

"""""""""""""""""""" Vim

nnoremap <space> <Nop>
let mapleader = " "
let maplocalleader= ","

iabbrev @@ Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
iabbrev """ """"""""""""""""""""

" Quick edit vimrc (plus cursor disappearing workaround (!ls<cr><cr>))
nnoremap <F1> :tabedit $DOTFILES_DIR/ansible/roles/vim/files/vimrc<cr>:!ls<cr><cr>G

" Move between windows easily
nnoremap <C-e> <C-w><C-k>
nnoremap <C-d> <C-w><C-j>
nnoremap <C-f> <C-w><C-l>
nnoremap <C-s> <C-w><C-h>

" Move in windows easily
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>
nnoremap <M-j> <C-f>
nnoremap <M-k> <C-b>

" Move between tabs easily
noremap <C-h> :<C-U>tabprevious<cr>
noremap <C-l> :<C-U>tabnext<cr>

" Move between quickfix items easily
nnoremap <M-h> :<C-U>cprevious<cr>
nnoremap <M-l> :<C-U>cnext<cr>

" Move windows easily
nnoremap <C-w>j <C-w>J
nnoremap <C-w>k <C-w>K
nnoremap <C-w>l <C-w>L
nnoremap <C-w>h <C-w>H

" Resize windows
nnoremap <M-d> :<C-U>resize -4<cr>
nnoremap <M-e> :<C-U>resize +4<cr>
nnoremap <M-s> :<C-U>vertical resize +16<cr>
nnoremap <M-f> :<C-U>vertical resize -16<cr>

" Close highlighting
nnoremap <Bslash>h :<C-U>noh<cr>

" Better tabbing alignment
vnoremap < <gv
vnoremap > >gv

" Better Vertical block movement
vmap [v [egv
vmap ]v ]egv

" Paste at mark
nnoremap <Bslash>p :<C-U>call <SID>paste_at_mark()<cr>
" Open mark in vertical split
nnoremap <expr> <Bslash>o '<C-w>v`' . nr2char(getchar())

" Easier search and/or replace (TODO: figure how to position cursor properly)
nnoremap <leader>rr :<C-U>%s//gI<Left><Left><Left>
nnoremap <leader>ri :<C-U>%s//gi<Left><Left><Left>
nnoremap <leader>rc :<C-U>%s//gc<Left><Left><Left>
nnoremap <leader>rh cgn

" Faster shifting
nnoremap <Down> 5<C-e>
nnoremap <Up> 5<C-y>
nnoremap <Left> zH
nnoremap <Right> zL

nnoremap <leader>ts :<C-U>windo w<cr>:tabclose<cr>

" Expand split in new tab
nnoremap <leader>tt :<C-U>tab split<cr>
" Create a new tab at the end
nnoremap <leader>tn :<C-U>tabnew<cr>:<C-U>tabmove<cr>
" Close the tab
nnoremap <leader>tc :<C-U>tabclose<cr>
" Go to last visited tab
let g:lastTab = 1
nnoremap <leader>tl :<C-U>exec "tabn " . g:lastTab<cr>

" Quick open the quickfix list
nnoremap <leader>oq :<C-U>botright copen<cr>

" Default Prettify Indententation
nnoremap <leader>pp gg=G''

augroup customVim
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif
  " Removing the o option removes adding a comment when open new line
  autocmd Filetype * set formatoptions-=o
  " Set the last known tab when switching tabs
  autocmd TabLeave * let g:lastTab = tabpagenr()
  " Source vimrc when saving the file
  autocmd BufWritePost $DOTFILES_DIR/ansible/roles/vim/files/vimrc nested source $MYVIMRC
  " Delete trailing spaces
  autocmd FileType c,cpp,java,javascript,vim,python,yaml,sh,tmux autocmd BufWritePre <buffer> :call DeleteTrailingSpacesSilent()
  " Add line numbers
  autocmd BufEnter * set number
  " Toggle relative line number mode when inserting
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
  " Enter insert mode for terminal upon entering
  autocmd TermOpen * startinsert
  " Easier exiting
  autocmd TermOpen * tnoremap <buffer> <Esc> <C-\><C-n>
augroup END

"""""""""""""""""""""" Javascript Family

augroup customJavascriptFamily
  autocmd!
  autocmd FileType javascript,javascriptreact,typescript,typescriptreact setl tabstop=2 | setl shiftwidth=2
  " User prettier
  autocmd FileType graphql,html,json,javascript,javascriptreact,typescript,typescriptreact nnoremap <buffer> <leader>pp :Prettier<cr>
  " Debugger expand for js files
  autocmd FileType javascript,javascriptreact,typescript,typescriptreact iabbrev <buffer> d; debugger;
  " Run tests with vimux using jest
  autocmd FileType javascript,javascriptreact,typescript,typescriptreact map <buffer> <Bslash>t :call VimuxRunCommand("clear; cd " . expand('%:p:h') . "; jest --watch " . bufname("%"))<CR>
augroup END

"""""""""""""""""""""" Lightline

function! LightlineBranch()
  return winwidth(0) > 70 ? FugitiveHead() : ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? &fileencoding : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \ },
      \ 'component_function': {
      \   'gitbranch': 'LightlineBranch',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding'
      \ },
      \ }

"""""""""""""""""""" NERDTree (File Tree Viewer Plugin)

nnoremap <leader>n     :<C-U>NERDTreeToggle<cr>
nnoremap <leader><C-n> :<C-U>NERDTreeFind<cr>

let NERDTreeShowLineNumbers = 1
let NERDTreeMouseMode       = 3
let NERDTreeShowHidden      = 1
let NERDTreeQuitOnOpen      = 0
let NERDTreeMinimalUI       = 1
let NERDTreeArrows          = 1
let NERDTreeCustomOpenArgs  = {
      \ 'file': {
      \   'reuse': 'currenttab',
      \   'where': 'v',
      \   'stay': 1
      \ },
      \ 'dir': {
      \   'where': 't',
      \   'keepopen': 1,
      \ }
      \ }

augroup customNERDTree
  autocmd!
  " Close NERDTree if its the last open window
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

"""""""""""""""""""" NERDCommenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 0

"""""""""""""""""""" Git Plugins (Fugitive, Gitgutter, etc.)

" Open diffs of all the different changed files in tabs
nnoremap <leader>dd :<C-U>wall \| mks! /tmp/diffsession.vim \| tabonly \| Git difftool -y \| tabclose 1<cr>
" Restore previous session
nnoremap <leader>dr :<C-U>wall \| tabonly \| source /tmp/diffsession.vim<cr>
" Choose left buffer
nnoremap <expr> <leader>dj ':<C-U>diffget //2/' . bufname('') . '<cr>'
" Choose the right buffer
nnoremap <expr> <leader>dk ':<C-U>diffget //3/' . bufname('') . '<cr>'
" Refresh difftool
nnoremap <leader>du :<C-U>diffupdate<cr>
" Open merge conflicts in different tabs
nnoremap <leader>dc :<C-U>wall \| mks! /tmp/diffsession.vim \| tabonly \| Git mergetool -y \| tabclose 1<cr>
" Open git blame with commit and author
nmap <leader>gb :<C-U>Git blame<cr>A
" Create diffsplit
nnoremap <leader>ds :<C-U>tab split<cr>:<C-U>Gvdiffsplit<cr>

cabbrev gb Git branch
cabbrev gbd Git branch -d
cabbrev gbdr Git push origin --delete
cabbrev gp Git push
cabbrev gco Git checkout
cabbrev gcb Git checkout -b
cabbrev gac Git commit -a -m
cabbrev gsta Git stash push -u
cabbrev gstd Git stash drop
cabbrev gstl Git stash list
cabbrev gstp Git stash pop

"""""""""""""""""""" Snippets

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

"""""""""""""""""""" Ripgrep

let g:rg_command = 'rg --vimgrep -S'
let g:rg_highlight = v:true

" Search for word under cursor in project
nnoremap <leader>fw :Rg <C-R>=expand("<cword>")<cr><cr>
" Search for highlighted word in project
vnoremap <leader>fw y:<C-U>Rg <C-R>=escape(@",'/\')<cr><cr>
" Search for visually selected word in buffer
vnoremap // y/\V<C-R>=escape(@",'/\')<cr><cr>

"""""""""""""""""""" FZF (Fuzzy Finder)

let g:fzf_command_prefix = 'F'

" Do not search the file path with rip grep
" (using with_preview 'options' parameter)
command! -bang -nargs=* FARg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
      \   fzf#vim#with_preview({'options': '--delimiter=: --nth=4..'}, 'right'), <bang>0)

nnoremap <leader>ff  :<C-U>FFiles<cr>
nnoremap <leader>fg  :<C-U>FGFiles?<cr>
nnoremap <leader>fr  :<C-U>FRg<cr>
nnoremap <leader>fa  :<C-U>FARg<cr>
nnoremap <leader>fh  :<C-U>FHistory: <cr>
nnoremap <leader>fb  :<C-U>FBLines<cr>
nnoremap <leader>fl  :<C-U>FLines<cr>
nnoremap <leader>fs  :<C-U>FHistory/<cr>
nnoremap <leader>fm  :<C-U>FMarks<cr>
nnoremap <leader>fc  :<C-U>FCommands<cr>
nnoremap <leader>ft  :<C-U>FTags<cr>
nnoremap <leader>fo  :<C-U>FBuffers<cr>

augroup customFZF
  autocmd!
  autocmd FileType fzf tunmap <buffer> <Esc>
augroup END

"""""""""""""""""""" Coc (LSP Client)

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use C to open coc config
call SetupCommandAbbrs('C', 'CocConfig')

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <c-space>for trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Navigate diagnostics
nmap [g <Plug>(coc-diagnostic-prev)
nmap ]g <Plug>(coc-diagnostic-next)
" Naviate Coc List
nmap ]d :<C-U>CocNext<cr>
nmap [d :<C-U>CocPrev<cr>

nmap <leader>ad <Plug>(coc-definition)
nmap <leader>at <Plug>(coc-type-definition)
nmap <leader>ai <Plug>(coc-implementation)
nmap <leader>ar <Plug>(coc-references)
nmap <leader>aR <Plug>(coc-rename)

" Mappings using CoCList

" Show all diagnostics.
nnoremap <leader>ld  :<C-U>CocList diagnostics<cr>
" Manage extensions.
nnoremap <leader>le  :<C-U>CocList extensions<cr>
" Show commands.
nnoremap <leader>lc  :<C-U>CocList commands<cr>
" Find symbol of current Outline
nnoremap <leader>lo  :<C-U>CocList outline<cr>
" Search workspace symbolS
nnoremap <leader>ls  :<C-U>CocList -I symbols<cr>
" Resume latest coc list.
nnoremap <leader>lr :<C-U>CocListResume<cr>

augroup customLSP
  autocmd!
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  " Close the pop up menu after completion
  autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | silent! pclose | endif
  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END

"""""""""""""""""""""" Easy Motion

let g:EasyMotion_do_mapping       = 0
let g:EasyMotion_smartcase        = 1
let g:EasyMotion_use_smartsign_us = 1

map <leader>j <Plug>(easymotion-bd-f)
map <leader><C-j> <Plug>(easymotion-bd-jk)
map <leader>k <Plug>(easymotion-bd-w)
map <leader><C-k> <Plug>(easymotion-bd-e)

"""""""""""""""""""""" Vimux

" Prompt for a command to run
map <Leader>vp :<C-U>VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vl :<C-U>VimuxRunLastCommand<CR>
" Inspect runner pane
map <Leader>vi :<C-U>VimuxInspectRunner<CR>
" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :<C-U>VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
map <Leader>vx :<C-U>VimuxInterruptRunner<CR>
" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>vz :<C-U>call VimuxZoomRunner()<CR>
" Clear the tmux history of the runner pane
map <Leader>vc :<C-U>call VimuxRunCommand("clear;")<CR>

"""""""""""""""""""""" Closetag

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.

let g:closetag_filetypes = "html,javascriptreact,typescriptreact"

"""""""""""""""""""""" Delimitmate

let delimitMate_excluded_ft = "clojure"


