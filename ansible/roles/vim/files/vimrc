" Settings vimrc file.
"
" Maintainer: Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
"

""""""""""""""""""""
"""""""""""""""""""" Defaults Customizations
""""""""""""""""""""

" Bail out if something that ran earlier, e.g. a system wide vimrc, does not
" want Vim to use these default values.
if exists('skip_defaults_vim')
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" Avoid side effects when it was already reset.
if &compatible
  set nocompatible
endif

" Set the font
if has("gui_running")
  set guifont=Ubuntu\ Mono\ Bold\ 14
endif

" Stop flashing
set visualbell
set t_vb=

" Add line numbers
set number
set relativenumber
" Toggle in insert mode
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Default to spaces
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" keep 1000 lines of command line history
set history=1000
" show the cursor position all the time
set ruler
" display incomplete commands
set showcmd
" display completion matches in a status line
set wildmenu
" Set the amount of time vim waits to write to the swap file
set updatetime=100

" time out for mappings
set timeout
set timeoutlen=1000

" time out for key codes
set ttimeout
set ttimeoutlen=100

" Show @@@ in the last line if it is truncated.
set display=truncate

" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" Don't use Ex mode, use Q for formatting.
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on
endif

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
" Revert with ":filetype off".
filetype plugin indent on

" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"
augroup vimStartup
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

  " Removing the o option removes adding a comment when open new line
  autocmd Filetype * set formatoptions-=o
augroup END

" Whenever Vim writes things to a buffer
augroup vimWrite
  autocmd!
  autocmd FileType c,cpp,java,javascript,vim,python,yaml autocmd BufWritePre <buffer> %s/\s\+$//e
augroup END

if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif

""""""""""""""""""""
"""""""""""""""""""" Abbreviations
""""""""""""""""""""

iabbrev @@ Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
iabbrev """ """"""""""""""""""""

""""""""""""""""""""
"""""""""""""""""""" Misc. Mappings
""""""""""""""""""""

nnoremap <space> <Nop>
let mapleader = " "

" Quick edit vimrc (plus cursor disappearing workaround (!ls<cr><cr>))
nnoremap <leader>ev :vsplit $DOTFILES_DIR/ansible/roles/vim/files/vimrc<cr>:!ls<cr><cr>G
nnoremap <leader>sv :w<cr>:source ~/.vimrc<cr>
nnoremap <leader>sve :w<cr>:source ~/.vimrc<cr>:q<cr>:!ls<cr><cr>

" Move around tabs easily

" Go to the previous tab
nnoremap <leader>h :<C-U>tabprevious<cr>
" Go to the next tab
nnoremap <leader>l :<C-U>tabnext<cr>
" Go to some tab ([count]<leader>t, where count is the tab number)
nnoremap <expr> <leader>tt ':<C-U>tabnext ' . v:count . '<cr>'
" Create a new tab at the end
nnoremap <leader>tn :<C-U>tabnew<cr>:<C-U>tabmove<cr>
" Close the tab
nnoremap <leader>tc :<C-U>tabclose<cr>

" Move between windows easily
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Better splitting
set splitright
set splitbelow

""""""""""""""""""""
"""""""""""""""""""" Plugins
""""""""""""""""""""

call plug#begin('~/.vim/plugged')

Plug 'tomasr/molokai'
Plug 'itchyny/lightline.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'sirver/ultisnips'

call plug#end()

""""""""""""""""""""
"""""""""""""""""""" Plugin Customizations
""""""""""""""""""""

"""""""""""""""""""" Molokai Theme

colorscheme molokai

"""""""""""""""""""" Lightline

set laststatus=2

"""""""""""""""""""" NERDTree (File Tree Viewer Plugin)

nnoremap <leader>n :<C-U>NERDTreeToggle<cr>

let NERDTreeShowLineNumbers = 1
let NERDTreeQuitOnOpen = 3

augroup customNERDTree
  autocmd!
  " Close NERDTree if its the last open window
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

"""""""""""""""""""" NERDComenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 0

"""""""""""""""""""" Fugitive (Git Plugin)

" Open diffs of all the different changed files in tabs
nnoremap <leader>dt :<C-U>Git difftool -y<cr>
" Choose left buffer
nnoremap <leader>dl :<C-U>diffget //2<cr>
" Choose the right buffer
nnoremap <leader>dr :<C-U>diffget //3<cr>
" Refresh difftool
nnoremap <leader>du :<C-U>diffupdate
" Open merge conflicts in different tabs
nnoremap <leader>gmc :<C-U>Git mergetool<cr>
" Open git blame with commit and author
nmap <leader>gb :<C-U>Git blame<cr>A

cabbrev gco Git checkout
cabbrev gcb Git checkout -b
cabbrev gac Git commit -a -m
cabbrev gsta Git stash push -u
cabbrev gstd Git stash drop
cabbrev gstl Git stash list
cabbrev gstp Git stash pop

"""""""""""""""""""" Snippets

" Trigger configuration.
let g:UltiSnipsExpandTrigger="<C-g>"
let g:UltiSnipsListSnippets="<S-C-g>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsEditSplit="vertical"

" Directories to search for snippets
let g:snippetPath=$DOTFILES_DIR.'/ansible/roles/vim/files/snippets/'
let g:UltiSnipsSnippetDirectories=[snippetPath]

" Quick Edit the snippets
nnoremap <expr> <leader>es ':<C-U>tabedit ' . g:snippetPath

