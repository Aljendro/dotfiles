" Settings vimrc file.
"
" Maintainer: Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
"

call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'craigemery/vim-autotag'
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'luochen1990/rainbow'
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'sirver/ultisnips'
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

call plug#end()


"""""""""""""""""""" Settings

let g:rainbow_active        = 1
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_hls_cursor    = 'blue'

colorscheme gruvbox

filetype plugin indent on
syntax enable

let g:loaded_perl_provider   = 0
let g:loaded_python_provider = 0
let g:loaded_ruby_provider   = 0
let g:node_host_prog         = expand("~/.nvm/versions/node/v12.13.0/bin/neovim-node-host")
let g:python3_host_prog      = expand("/usr/bin/python3")

set autoindent                     " Copy indentation from current line when opening new line
set background=dark                " Indicated the type of background
set clipboard=unnamedplus          " Yank to the system clipboard
set cmdheight=2                    " Give more space for displaying messages.
set cursorline                     " Highlights the current line
set display=truncate               " Show @@@ in the last line if it is truncated.
set encoding=utf-8
set expandtab                      " Convert tab to spaces
set fileencoding=utf-8
set guifont=Ubuntu\ Mono\ Bold\ 14
set hidden                         " Buffer becomes hidden when it is abandoned
set hlsearch                       " Highlight searches
set ignorecase                     " Ignore case when searching
set incsearch                      " Do incremental searching when it's possible to timeout.
set laststatus=2                   " Always have a status line
set mouse=a                        " Allows mouse click on vim
set nobackup                       " Some servers have issues with backup files (see #649 Coc.nvim)
set nolangremap                    " Do not remap characters
set noshowmode                     " Don't show the -- Insert -- anymore
set nowrap                         " Do not wrap lines
set nowritebackup                  " Do not make backup when overwriting a file
set nrformats-=octal               " Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
set number                         " Add line numbers
set relativenumber                 " Relativize line numbers from current line
set ruler                          " Show the cursor position all the time
set scrolloff=5                    " Keep context around cursor
set shiftwidth=2                   " Number of spaces used for autoindent
set shortmess+=c                   " Don't pass messages to |ins-completion-menu|.
set showcmd                        " Display incomplete commands
set signcolumn=yes                 " Always show the signcolumn, otherwise it would shift the text each time
set smartcase                      " If search contains uppercase characters, disobey ignorecase
set smartindent                    " Indents when creating a newline
set smarttab                       " Discerns between 2 vs. 4 when tabbing
set splitbelow                     " Open a window below the current window
set splitright                     " Open a window right of the current window
set t_Co=256
set tabstop=2                      " Number of spaces that a <Tab> counts for
set termguicolors
set timeout                        " Time out for mappings
set timeoutlen=1000
set ttimeout                       " Time out for key codes
set ttimeoutlen=100
set updatetime=100                 " Set the amount of time vim waits to write to the swap file
set wildmenu                       " Display completion matches in a status line

"""""""""""""""""""" Functions

function! DeleteTrailingSpacesSilent()
  %s/\s\+$//e
  call histdel('search', -1)
endfunction

function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Unload current buffer and close window
function! s:delete_current_buffer() abort
  let current_buffer = bufnr("%")
  exec ":bw!" . current_buffer
endfunction

"""""""""""""""""""" Vim

nnoremap <space> <Nop>
let mapleader = " "

iabbrev @@ Alejandro Alvarado <alejandro.alvarado0650144@gmail.com>
iabbrev """ """"""""""""""""""""

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Quick edit vimrc (plus cursor disappearing workaround (!ls<cr><cr>))
nnoremap <leader>ev :tabedit $DOTFILES_DIR/ansible/roles/vim/files/vimrc<cr>:!ls<cr><cr>G
nnoremap <leader>st :<C-U>windo w<cr>:tabclose<cr>

" Easy quit
nnoremap <leader>q :<C-U>q<cr>

" Adding extra tab traversal
nnoremap ]t :tabnext<cr>
nnoremap [t :tabprevious<cr>
nnoremap ]T :tablast<cr>
nnoremap [T :tabfirst<cr>

" Expand split in new tab
nnoremap <leader>ts :tab split<cr>
" Create a new tab at the end
nnoremap <leader>tn :<C-U>tabnew<cr>:<C-U>tabmove<cr>
" Close the tab
nnoremap <leader>tc :<C-U>tabclose<cr>
" Go to last visited tab
let g:lastTab = 1
nnoremap <leader>tl :exec "tabn " . g:lastTab<cr>

" Move between windows easily
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Move windows easily
nnoremap <C-W>j <C-W>J
nnoremap <C-W>k <C-W>K
nnoremap <C-W>l <C-W>L
nnoremap <C-W>h <C-W>H

" Resize windows
nnoremap <silent> <M-j> :resize -4<cr>
nnoremap <silent> <M-k> :resize +4<cr>
nnoremap <silent> <M-h> :vertical resize +12<cr>
nnoremap <silent> <M-l> :vertical resize -12<cr>

" Close highlighting
nnoremap <leader>h :noh<cr>

" Better tabbing alignment
vnoremap < <gv
vnoremap > >gv

" Quick open the quickfix list
nnoremap <leader>qo :botright copen<cr>
nnoremap <leader>qc :cclose<cr>

augroup customVim
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif
  " Removing the o option removes adding a comment when open new line
  autocmd Filetype * set formatoptions-=o
  " Set the last known tab when switching tabs
  autocmd TabLeave * let g:lastTab = tabpagenr()
  " Source vimrc when saving the file
  autocmd BufWritePost $DOTFILES_DIR/ansible/roles/vim/files/vimrc nested source $MYVIMRC
  " Delete trailing spaces
  autocmd FileType c,cpp,java,javascript,vim,python,yaml,sh,tmux autocmd BufWritePre <buffer> :call DeleteTrailingSpacesSilent()
  " Toggle relative line number mode when inserting
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
  " Enter insert mode for terminal upon entering
  autocmd TermOpen * startinsert
  " Immediately destroy the terminal buffer and close the window when terminal
  " closes
  autocmd TermClose * :call <SID>delete_current_buffer()
  " Easier exiting
  autocmd TermOpen * tnoremap <buffer> <Esc> <C-\><C-n>
augroup END

"""""""""""""""""""""" Lightline

function! LightlineBranch()
  return winwidth(0) > 70 ? FugitiveHead() : ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? &fileencoding : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \ },
      \ 'component_function': {
      \   'gitbranch': 'LightlineBranch',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding'
      \ },
      \ }

"""""""""""""""""""" NERDTree (File Tree Viewer Plugin)

nnoremap <leader>n     :<C-U>NERDTreeToggle<cr>
nnoremap <leader><C-n> :<C-U>NERDTreeFind<cr>

let NERDTreeShowLineNumbers = 1
let NERDTreeQuitOnOpen = 0
let NERDTreeMinimalUI = 1
let NERDTreeArrows = 1
let NERDTreeCustomOpenArgs = {
      \ 'file': {
      \   'reuse': 'currenttab',
      \   'where': 'v',
      \   'stay': 1
      \ },
      \ 'dir': {
      \   'where': 't',
      \   'keepopen': 1,
      \ }
      \ }

augroup customNERDTree
  autocmd!
  " Close NERDTree if its the last open window
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

"""""""""""""""""""" NERDCommenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 0

"""""""""""""""""""" Auto Pairs

let g:AutoPairsMapCR = 1

"""""""""""""""""""" Fugitive (Git Plugin)

" Open diffs of all the different changed files in tabs
nnoremap <silent> <leader>dt :<C-U>wall \| mks! /tmp/diffsession.vim \| tabonly \| Git difftool -y \| tabclose 1<cr>
" Restore previous session
nnoremap <silent> <leader>de :<C-U>wall \| tabonly \| source /tmp/diffsession.vim<cr>
" Choose left buffer
nnoremap <leader>dl :<C-U>diffget //2<cr>
" Choose the right buffer
nnoremap <leader>dr :<C-U>diffget //3<cr>
" Refresh difftool
nnoremap <leader>du :<C-U>diffupdate<cr>
" Open merge conflicts in different tabs
nnoremap <leader>gmc :<C-U>Git mergetool -y<cr>
" Open git blame with commit and author
nmap <leader>gb :<C-U>Git blame<cr>A
" Create diffsplit
nnoremap <leader>ds :<C-U>tab split<cr>:<C-U>Gdiffsplit<cr>

cabbrev gcp Git push
cabbrev gco Git checkout
cabbrev gcb Git checkout -b
cabbrev gac Git commit -a -m
cabbrev gsta Git stash push -u
cabbrev gstd Git stash drop
cabbrev gstl Git stash list
cabbrev gstp Git stash pop

"""""""""""""""""""" Snippets

" Trigger configuration.
let g:UltiSnipsExpandTrigger="<C-g>"
let g:UltiSnipsListSnippets="<C-S-g>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsEditSplit="vertical"

" Directories to search for snippets
let g:snippetPath=$DOTFILES_DIR.'/ansible/roles/vim/files/snippets/'
let g:UltiSnipsSnippetDirectories=[snippetPath]

" Quick Edit the snippets
nnoremap <expr> <leader>es ':<C-U>tabedit ' . g:snippetPath

"""""""""""""""""""" Ripgrep

let g:rg_command = 'rg --vimgrep -S'
let g:rg_highlight = v:true

"""""""""""""""""""" FZF (Fuzzy Finder)

let g:fzf_command_prefix = 'F'

" Do not search the file path with rip grep
" (using with_preview 'options' parameter)
command! -bang -nargs=* FRg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options': '--delimiter=: --nth=4..'}, 'right'), <bang>0)

nnoremap <leader>ff :<C-U>FFiles<cr>
nnoremap <leader>fg :<C-U>FGFiles?<cr>
nnoremap <leader>fr :<C-U>FRg<cr>
nnoremap <leader>fh :<C-U>FHistory:<cr>
nnoremap <leader>fb :<C-U>FBLines<cr>
nnoremap <leader>fl :<C-U>FLines<cr>
nnoremap <leader>fs :<C-U>FHistory/<cr>
nnoremap <leader>fm :<C-U>FMarks<cr>
nnoremap <leader>fc :<C-U>FCommands<cr>
nnoremap <leader>ft :<C-U>FTags<cr>
nnoremap <leader>fo :<C-U>FBuffers<cr>

augroup customFZF
  autocmd!
  autocmd FileType fzf tunmap <buffer> <Esc>
augroup END

"""""""""""""""""""" Coc (LSP Client)

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>\<C-R>=AutoPairsReturn()\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>\<C-R>=AutoPairsReturn()\<CR>"
endif

" Use C to open coc config
call SetupCommandAbbrs('C', 'CocConfig')

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <c-space>for trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Navigate diagnostics
nmap [g <Plug>(coc-diagnostic-prev)
nmap ]g <Plug>(coc-diagnostic-next)
" Naviate Coc List
nmap ]d :<C-U>CocNext<cr>
nmap [d :<C-U>CocPrev<cr>

nmap <leader>ad <Plug>(coc-definition)
nmap <leader>at <Plug>(coc-type-definition)
nmap <leader>ai <Plug>(coc-implementation)
nmap <leader>ar <Plug>(coc-references)
nmap <leader>aR <Plug>(coc-rename)

" Mappings using CoCList

" Show all diagnostics.
nnoremap <silent> <leader>ld  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <leader>le  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <leader>lc  :<C-u>CocList commands<cr>
" Find symbol of current outline
nnoremap <silent> <leader>lo  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <leader>ls  :<C-u>CocList -I symbols<cr>
" Resume latest coc list.
nnoremap <silent> <leader>lr :<C-u>CocListResume<CR>

augroup customLSP
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  " Close the pop up menu after completion
  autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END

"""""""""""""""""""""" Prettier

command! -nargs=0 Prettier :CocCommand prettier.formatFile

nnoremap <silent> <leader>pp :Prettier<cr>
vnoremap <leader>pf <Plug>(coc-format-selected)
nnoremap <leader>pf <Plug>(coc-format-selected)

